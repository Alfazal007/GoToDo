// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: todo_queries.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createTodo = `-- name: CreateTodo :one
insert into todos (id, title, description, user_id) values ($1, $2, $3, $4) returning id, title, description, done, user_id
`

type CreateTodoParams struct {
	ID          uuid.UUID
	Title       string
	Description string
	UserID      uuid.UUID
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.UserID,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Done,
		&i.UserID,
	)
	return i, err
}

const getTodoById = `-- name: GetTodoById :one
select id, title, description, done, user_id from todos where id=$1
`

func (q *Queries) GetTodoById(ctx context.Context, id uuid.UUID) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoById, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Done,
		&i.UserID,
	)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :one
update todos set done=true where id=$1 returning id, title, description, done, user_id
`

func (q *Queries) UpdateTodo(ctx context.Context, id uuid.UUID) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Done,
		&i.UserID,
	)
	return i, err
}
